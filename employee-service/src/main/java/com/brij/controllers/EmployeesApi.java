/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.brij.controllers;

import com.brij.dto.EmployeeRequestDTO;
import com.brij.dto.EmployeeResponseDTO;
import com.brij.dto.ErrorDetails;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-28T22:33:33.870+05:30[Asia/Kolkata]")

@Validated
@Api(value = "employees", description = "the employees API")
public interface EmployeesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "API to create employee in a system", nickname = "createEmployee", notes = "This API will create the employee", response = EmployeeResponseDTO.class, tags={ "employee","employees-api-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = EmployeeResponseDTO.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/employees",
        produces = { "application/json; charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EmployeeResponseDTO> createEmployee(@ApiParam(value = "auth header" ,required=true) @RequestHeader(value="auth_key", required=true) String authKey,@ApiParam(value = "" ,required=true )  @Valid @RequestBody EmployeeRequestDTO employeeRequestDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", "{  \"employeeType\" : \"IT\",  \"name\" : \"bp\",  \"active\" : false,  \"joiningDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : \"EMP-1\",  \"email\" : \"bp@gmail.com\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Find employee by id", nickname = "getEmployee", notes = "Provide valid employee id", response = EmployeeResponseDTO.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Employee details", response = EmployeeResponseDTO.class) })
    @RequestMapping(value = "/employees/{id}",
        produces = { "application/json; charset=utf-8" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EmployeeResponseDTO> getEmployee(@ApiParam(value = "id of the employee",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", "{  \"employeeType\" : \"IT\",  \"name\" : \"bp\",  \"active\" : false,  \"joiningDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : \"EMP-1\",  \"email\" : \"bp@gmail.com\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "API to update employee", nickname = "updateEmployee", notes = "This API will update the employee", response = EmployeeResponseDTO.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = EmployeeResponseDTO.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/employees/{id}",
        produces = { "application/json; charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<EmployeeResponseDTO> updateEmployee(@ApiParam(value = "id of the employee",required=true) @PathVariable("id") String id,@ApiParam(value = "auth header" ,required=true) @RequestHeader(value="auth_key", required=true) String authKey,@ApiParam(value = "" ,required=true )  @Valid @RequestBody EmployeeRequestDTO employeeRequestDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", "{  \"employeeType\" : \"IT\",  \"name\" : \"bp\",  \"active\" : false,  \"joiningDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : \"EMP-1\",  \"email\" : \"bp@gmail.com\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
